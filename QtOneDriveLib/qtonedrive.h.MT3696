#ifndef QTONEDRIVE_H
#define QTONEDRIVE_H

#include "qtonedrivelib_global.h"
#include <QObject>
#include <QUrl>
#include <QUrlQuery>
#include <QDebug>
#include <QDateTime>
#include <QJsonObject>

namespace {
    #define ONEDRIVE_DEF_LOCAL_PORT  54432
}

class QtOneDriveAuthorizationDialog;
class QSettings;
class QNetworkAccessManager;

class QTONEDRIVELIBSHARED_EXPORT QtOneDrive : public QObject
{
    Q_OBJECT

    enum OneDriveState
    {
        Empty,

        SingIn,
        SingOut,
        GetUserInfo,

        UploadFile,
        DownloadFile,
        DeleteFile,

        CreateFolder,
        DeleteFolder
    };

public:
    explicit QtOneDrive(const QString& clientID,
                        const QString& secret,
                        const QString& userID,
                        QObject* parent = 0 );

    explicit QtOneDrive(const QString& clientID,
                        const QString& secret,
                        const QString& redirectUri,
                        const QString& userID,
                        QObject* parent = 0 );

    ~QtOneDrive();


public:
    void signIn();
    bool isSingIn() const { return isSignIn_; }

    void signOut();
    void getUserInfo();

    void uploadFile(const QString &path);
    void downloadFile(const QString &path);
    void refreshToken();
    void getToken();
    void closeAuthorizationForm();

    QString debugInfo() const;
    bool isBusy() const { return state_ != Empty; }

signals:
    void errorSignIn( const QString &error );
    void errorSignOut( const QString &error );
    void errorUploadFile( const QString &error );
    void errorDownloadFile( const QString &error );
    void errorGetUserInfo( const QString &error );
    void error( const QString &error );

    void successSignIn();
    void successSingOut();
    void successUploadFile();
    void successDownloadFile();
    void successGetUserInfo(const QJsonObject &json);


private:

    QUrl singInUrl() const;
    QUrl singOutUrl() const;
    QUrl getTokenUrl() const;
    QUrl getUserInfoUrl() const;

    QUrlQuery getTokenPost() const;
    QUrlQuery refreshTokenPost() const;

    void saveProperties();
    void loadProperties();

private:
    bool startLocalServer();
    void emitError( const QString &desc );

    bool isNeedRefreshToken() const;

    void requestGetUsetInfo();
    void requestRefreshToken();


private:
    QString clientID_;
    QString secret_;
    QString authorizationCode_;
    QString redirectURI_;

    QString accessToken_;
    QString refreshToken_;
    QString authenticationToken_;

    QDateTime tokenTime_;
    QDateTime expiredTokenTime_;

    bool isSignIn_ = false;

    QSettings* properties_;

    OneDriveState state_ = Empty;

    QNetworkAccessManager* networkManager_ = nullptr;

    QtOneDriveAuthorizationDialog* dialog_ = nullptr;
};

#endif // QTONEDRIVE_H
